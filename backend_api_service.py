# backend_api_service.py â€“ FastAPI Backend for Dropshipping AI
# Created: 2025-03-16

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import pandas as pd
import json

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Load latest data files (generated by core AI pipeline)
NICHE_VAULT_PATH = "niche_vault_latest.json"
ORDER_LOG_PATH = "order_log_latest.json"
FINANCIAL_METRICS_PATH = "financial_metrics_latest.json"

# --- Routes ---

@app.get("/niches")
def get_niches():
    try:
        with open(NICHE_VAULT_PATH, 'r') as f:
            data = json.load(f)
        return {"status": "success", "niches": data}
    except Exception as e:
        return {"status": "error", "message": str(e)}

@app.get("/orders")
def get_orders():
    try:
        with open(ORDER_LOG_PATH, 'r') as f:
            data = json.load(f)
        return {"status": "success", "orders": data}
    except Exception as e:
        return {"status": "error", "message": str(e)}

@app.get("/financials")
def get_financial_metrics():
    try:
        with open(FINANCIAL_METRICS_PATH, 'r') as f:
            data = json.load(f)
        return {"status": "success", "metrics": data}
    except Exception as e:
        return {"status": "error", "message": str(e)}

@app.get("/scale-targets")
def get_scale_targets():
    try:
        df = pd.read_json(FINANCIAL_METRICS_PATH)
        filtered = df[df['roi_percent'] > 80]
        return {"status": "success", "targets": filtered.to_dict(orient="records")}
    except Exception as e:
        return {"status": "error", "message": str(e)}
